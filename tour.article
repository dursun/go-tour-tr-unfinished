Go Turu

Go Yazarları Sunar
http://golang.org

# Bu dosya içerisinde #appengine komutuyla başlayan
# satırlar var. Bu satırların tur içeriğine dahil
# olabilmesi için App Engine uygulaması olarak 
# yüklenmesi gerekir.
# Ayrıca, #appengine satırının hemen ardından gelen boş olmayan
# satırlar gizlenecektir. Bu App Engine'e özel varolan içeriğin 
# yerini almasını sağlar.
# Örneğin, bu paragraf
# 	We are running
# 	#appengine: on App Engine.
# 	locally.
# 	Yay!
# App Engine'da "We are running on App Engine. Yay!" şeklinde okunurken,
# diğer durumlarda "We are running locally. Yay!" şeklinde okunur.

* Merhaba, 世界

 [[http://golang.org/][Go programlama dili]] turuna hoş geldiniz.

Turumuz 3 bölümden oluşmaktadır: basit kavramlar, metodlar ve arayüzler, eşzamanlılık.

Her bölümün sonunda bir dizi alıştırmayı tamamlamanız beklenmektedir.

Turumuz etkileşimlidir. Programı uzak sunucu üzerinde derleyip, çalıştırmak için "Çalıştır" butonuna tıklayın (ya da Shift-Enter tuşlayın) kod derlenip, program
#appengine: uzak sunucuda
kendi bilgisayarınızda
çalıştırılacak.
Program çıktısını, kodun hemen altında görebilirsiniz.

Örnek programlar sizi Go'nun farklı yönleriyle tanıştıracak ve gelecekteki tecrübeleriniz için ilk adımları oluşturacak.

Yandaki programı düzenleyip yeniden çalıştırın.

İlerlemeye hazır olduğunuzda sayfanın altındaki sağ oka tıklayın ya da PageDown tuşlayın.
Gezinmek için sayfanın üstündeki "Go" bayrağına tıkladığınızda gelen menüyü de kullanabilirsiniz.

.play prog/tour/hello.go

* Dilinizde Go

Bu tur şu dillerde de mevcuttur:

- [[http://go-tour-br.appspot.com/][Brezilya Portekizcesi — Português do Brasil]]
- [[http://go-tour-ca.appspot.com/][Katalanca — Català]]
- [[http://go-tour-es.appspot.com/][İspanyolca — Español]]
- [[http://go-tour-fr.appspot.com/][Fransızca - Français]]
- [[http://go-tour-he.appspot.com/][İbranice — עִבְרִית]]
- [[http://go-tour-jp.appspot.com/][Japonca — 日本語]]
- [[http://go-tour-ro.appspot.com/][Rumence - Româna]]
- [[http://go-tour-zh.appspot.com/][Çince — 普通话]]

Devam etmek için "İleri" butonuna tıklayın ya da Page Down tuşlayın.

#appengine: * Go Playground
#appengine: 
#appengine: Bu tur [[http://golang.org/][golang.org]] sunucuları üzerinde çalışan
#appengine: [[http://play.golang.org/][Go Playground]] web servisi üzerine kurulmuştur.
#appengine: 
#appengine: Bu servis, Go programını, bir korunaklı sanal alan ("sandbox") içerisine alıp, derler, bağlar, çalıştırır
#appengine: ve çıktısını döndürür.
#appengine: 
#appengine: Playground içinde çalıştırılabilen programlar birtakım kısıtlamalara maruz kalır:
#appengine: 
#appengine: - Playground standart kütüphanenin çoğunu; ağ ve dosya sistemi erişimi eksiklikleri gibi göze çarpan bazı istisnalar dışında, kullanabilir. Bu nedenle, playground programının dış dünyayla tek iletişimi "standard output" ve "standard error"dur.
#appengine: - Playground'ta zamanın başlangıcı 2009-11-10 23:00:00 UTC tarihine tekabül eder (bu tarihin öneminin ne olduğunu bulmak okuyucu için alıştırma niteliğindedir). Bu, programlara rastgele olmayan çıktılar vererek önbelleğe alınmalarını kolaylaştırır.
#appengine: - Yürütme zamanı ("execution time"), işlemci, bellek kullanımında da kısıtlamalar mevcuttur ve program tek bir iş parçacığı ("thread") içerisinde çalışacak şekilde kısıtlanmıştır (ama birçok goroutine kullanabilir).
#appengine:
#appengine: Playground Go'nun en son kararlı sürümünü kullanır.
#appengine: 
#appengine: .play prog/tour/sandbox.go

* Paketler

Her Go programı paketlerden oluşur.

Programlar `main` paketinde çalışmaya başlar.

Bu örnek program `"fmt"` ve `"math/rand"` paketlerinin yolunu içe aktararak ("import") kullanıyor.

Geleneksel olarak, paket isimleri import yolunun son elementi ile isimlendirilir. Örneğin, `"math/rand"` paketi, `package`rand`deyimi ile başlayan dosyaları kapsar.

#appengine: *Not:* Bu programların yürütüldüğü ortamda rastgelelik olmadığı için,
#appengine: `rand.Intn` her zaman aynı sayıyı döndürecektir.
#appengine: 
#appengine: (Farklı bir sayı görmek için, sayı üreticisini besleyin; bkz. [[http://golang.org/pkg/math/rand/#Seed][`rand.Seed`]])

.play prog/tour/packages.go

* İçe Aktarımlar ("Imports")

Bu kod, içe aktarılan paketleri, parantezlenmiş ve parçalara ayrılmış import deyimi şeklinde gruplar. Ayrıca çoklu import deyimleri de kullanabilirsiniz:

	import "fmt"
	import "math"

.play prog/tour/imports.go

* Dışa Aktarılan İsimler

Bir paketi içe aktardıktan sonra, bu pakette dışa aktarılmış isimleri kullanabilirsiniz.

Go'da, dışa aktarılmış bir isim büyük harf ile başlar.

Tıpkı `FOO` gibi `Foo` da dışa aktarılmış bir isimdir. `foo` ise dışa aktarılmış bir isim değildir.

Yandaki kodu çalıştırın. Sonra "`math.pi`"yi  `math.Pi` şeklinde değiştirip yeniden çalıştırın.

.play prog/tour/exported-names.go

* Fonksiyonlar

Bir fonksiyon 0 veya daha fazla argüman alabilir.

Bu örnekte, `add` fonksiyonu `int` türünde iki parametre alıyor.

Değişken türünün değişken adından _sonra_ gelmesine dikkat buyurun.

(Değişken türlerinin neden bu şekilde tanımlandıkları hakkında daha fazla bilgi için; [[[http://golang.org/doc/articles/gos_declaration_syntax.html][Go dilinde bildirim sözdizimi]] makalesine bakınız.)

.play prog/tour/functions.go

* Fonksiyonlar devam

İki ya da daha fazla ardışık fonksiyon parametresi aynı türde ise, tür bilgisini, en sonda bulunan hariç, diğer argümanlar için belirtmeseniz de olur.

Bu örnekte,

x int, y int

fonksiyon parametrelerini şöyle kısalttık;

x, y int

.play prog/tour/functions-continued.go

* Çoklu sonuçlar

Bir fonksiyon herhangi bir sayıda sonuç döndürebilir.

Örnekteki fonksiyon, dizgi ("string") türünde iki sonuç döndürüyor.

.play prog/tour/multiple-results.go

* Adlandırılmış sonuçlar

Fonksiyonlar parametreler alırlar. Go'da fonksiyonlar sadece tek bir değer değil, birden fazla sonuç parametresi ("result parameters") döndürebilir. "Sonuç parametreleri" de değişkenler gibi isimlendirilebilir ve değişken gibi davranabilir.

Eğer sonuç parametreleri adlandırılmışsa, argümansız bir `return` deyimi sonuç parametrelerinin geçerli değerlerini döndürecektir.

.play prog/tour/named-results.go

* Değişkenler

`var` deyimi değişkenler tanımlamaya yarar. Ve tıpkı fonksiyon argümanlarında olduğu gibi; tür bilgisi sona yazılır.

.play prog/tour/variables.go

* Değişkenleri ilklendirme

Bir `var` deyimi, her değişken için bir ilklendirme değeri içerebilir.

Eğer bir ilklendirme mevcut ise, tür tanımlaması atlanabilir; değişken, ilklendirme değerinin tipini alacaktır.

.play prog/tour/variables-with-initializers.go

* Kısaltılmış değişken bildirimleri

Bir fonksiyon içerisinde, türü belirtilmiş bir `var` bildirimi yerine `:=` kısa atama deyimi kullanılabilir.

Fonksiyon alanının dışında, her yapı bir anahtar kelime (`var`, `func` vs.) ile başlar ve `:=` yapısını kullanmak mümkün değildir.

.play prog/tour/short-variable-declarations.go

* Basit türler

Go'nun basit türleri şunlardır

	bool

	string

	int  int8  int16  int32  int64
	uint uint8 uint16 uint32 uint64 uintptr

	byte // diğer adıyla uint8

	rune // diğer adıyla int32
	     // Unicode karakter kodlarını ifade eder

	float32 float64

	complex64 complex128

.play prog/tour/basic-types.go

* Sabitler

Sabitler de değişkenler ile aynı şekilde bildirilir ancak sabitler bildirilirken `const` anahtar kelimesi kullanılır.

Sabitler; karakter, dizgi ("string"), boolean ya da sayısal değerler alabilir.

Sabitler `:=` operatörü kullanılarak bildirilemezler.

.play prog/tour/constants.go

* Sayısal Sabitler

Sayısal sabitler yüksek hassasiyetli _değerlerdir_.

Tür bilgisi olmayan bir sabit, bağlamının gerektirdiği "tür"den olur.

`needInt(Big)` yazdırmayı da deneyin.

.play prog/tour/numeric-constants.go

* For

Go dilinde döngü yapısı olarak sadece `for` mevcuttur.

`for` döngüsü C ya da Java'dakiyle benzer yapıdadır; ancak `(`)`  yani parantezler kullanılmaz (opsiyonel bile değildir) ve `{`}` yani süslü parantez kullanılması şarttır.

.play prog/tour/for.go

* For devam

Tıpkı C ve Java'daki gibi; ön (birinci) ve son (üçüncü) deyimleri boş bırakabilirsiniz.

.play prog/tour/for-continued.go

* For, Go'nun "while"ıdır

Şimdi `for`daki noktalı virgülleri bir köşeye atabilirsiniz: C'deki `while`'ın karşılığı Go'da `for`'dur.

.play prog/tour/for-is-gos-while.go

* Sonsuza dek

Eğer döngü koşulunu belirtmezseniz, sonsuz döngü oluşacaktır.

Sonsuzluğu küçücük bir alana sığdırdık.

.play prog/tour/forever.go

* If

`if` koşulu C ve Java'dakiyle benzer yapıdadır ancak `(`)` (parantezler) kullanılmaz ve {`}` (süslü parantez) kullanılması zorunludur.

(Tanıdık mı geldi?)

.play prog/tour/if.go

* Kısa bir deyim ile if kullanımı

`for`'da olduğu gibi, `if` deyimi de koşuldan önce çalıştırılacak kısa bir deyim ile başlayabilir.

Bu kısa deyimde belirtilen değişkenler, `if` koşulunun kapsamı içinde geçerlidir.

(En sondaki return deyiminde `lim` yerine `v` kullanmayı deneyin.)

.play prog/tour/if-with-a-short-statement.go

* If ve else

`if`'in kapsamında geçerli olan kısa atama ile atanan değişkenler, `else` blokları içinde de geçerlidir.

.play prog/tour/if-and-else.go

* Alıştırma: Döngüler ve Fonksiyonlar

Newton’un karekök alma metodunu bir program ile gerçeklemek, fonksiyon ve döngü kullanma alıştırması yapmak için kolay bir yoldur.

Newton metodunda; bir _z_ başlangıç noktası seçilir ve 

.image static/newton.png

formülünü tekrarlayarak `Sqrt(x)` ("karekök x") değerine yaklaşılır.

Başlangıç olarak, bu hesaplamayı 10 defa tekrar edin ve çeşitli değerlerde (1, 2, 3, ...) cevaba ne kadar yaklaştığınızı görün.

Daha sonra, döngü koşulunu sonuç değeri değişmeyi bıraktığında (ya da çok küçük bir fark ile değiştiğinde) döngünün duracağı şekilde biçimlendirin. Döngünün daha fazla veya daha az çalışıp çalışmadığına bakın. [[http://golang.org/pkg/math/#Sqrt][`Math.sqrt`'nin]] verdiği sonuca ne kadar yakın bir cevap elde ettiniz?

İpucu: bir kayan noktalı sayı değerini (floating point value) bildirmek ve ilklendirmek için ya kayan noktalı sayı bildirmek için gereken sözdizimini kullanın ya da ya da dönüştürme işlemi uygulayın:

	z := float64(1)
	z := 1.0

.play prog/tour/exercise-loops-and-functions.go

* Yapılar

Struct ("yapı") alanların birleşimi ile oluşur.

(`type` bildirimi yapı ("struct") oluşturmaya yarar.)

.play prog/tour/structs.go

* Yapı Alanları

Yapı alanlarına nokta kullanılarak erişilir.

.play prog/tour/struct-fields.go

* İşaretçiler

Go dilinde işaretçiler ("pointers") mevcuttur fakat işaretçi aritmetiği kullanımı yoktur.

Yapı alanlarına, yapı işaretçisi ile erişilebilir. İşaretçi ile sağlanan bu dolaylı yol şeffaftır ("transparent").

.play prog/tour/pointers.go

* Yapısal Sabitler

Yapısal sabitler, henüz tahsis edilmiş yapı değerini, alanlarının değerini listeleyerek belirtir.

`Name`: sözdizimini kullanarak yalnızca alt alanları listeleyebilirsiniz (Adlandırılmış alanların sıralanması konumuz dışındadır)

Özel `&` ön eki, henüz tahsis edilmiş bir yapı için bir işaretçi oluşturur.

.play prog/tour/struct-literals.go

* new fonksiyonu

`new(T)` ifadesi, sıfırlanmış bir `T` değeri tahsis eder ve onu gösteren bir işaretçi döndürür.

	var t *T = new(T)

ya da

	t := new(T)

.play prog/tour/the-new-function.go

* Dilimler

Dilim ("slice") bir dizi değere işaret eder ve uzunluk bilgisi de mevcuttur.

`[]T`, `T` tipinden elemanları olan bir dilimdir.

.play prog/tour/slices.go

* Dilimleri dilimlemek

Bir dilim, aynı diziyi işaret eden yeni bir dilim değeri oluşturmak için yeniden dilimlenebilir.

	s[lo:hi]

ifadesi, `"lo"`dan `"hi-1"`e kadar olan elemanları (`"hi-1"` dahil) ifade eder. Buna göre;

	s[lo:lo]

dilimi boştur ve

	s[lo:lo+1]

dilimi ise bir elemana sahiptir.

.play prog/tour/slicing-slices.go

* Dilim oluşturmak

Dilimler `make` fonksiyonu ile oluşturulur. `make` fonskiyonu; bellekte sıfırlanmış bir dizi tahsis eder ve bu diziyi işaret eden bir dilim döndürür:

	a := make([]int, 5)  // len(a)=5

Kapasite belirtmek için, `make`'e üçüncü bir argüman geçirin:

	b := make([]int, 0, 5) // len(b)=0, cap(b)=5

	b = b[:cap(b)] // len(b)=5, cap(b)=5
	b = b[1:]      // len(b)=4, cap(b)=4

.play prog/tour/making-slices.go

* Nil dilimler

Boş bir dilimin değeri `nil`'dir.

Boş ("nil") bir dilimin uzunluk ve kapasite değeri 0'dır.

(Dilimler hakkında daha fazla bilgi için: [[http://golang.org/doc/articles/slices_usage_and_internals.html][Dilimler: kullanım ve detaylar]] makalesine bakınız.)

.play prog/tour/nil-slices.go

* [Erim]("Range")

`for` döngüsünün `range` formu ile bir dilim ("slice") veya eşlem ("map") üzerinde dolaşılır.

.play prog/tour/range.go

* Range devam

Değer dizisinin indislerini ya da o indise karşılık gelen değerleri `_` ataması ile atlayabilirsiniz.

Eğer yalnızca indisi elde etmek istiyorsanız, “, value” kısmını tamamen çıkarın.

.play prog/tour/range-continued.go

* Alıştırma: Dilimler

`"Pic"`i gerçekleyin. Fonksiyonunuz `dx`'in (8 bitlik işaretsiz tam sayılar) dilimi olan her bir eleman için, `dy` uzunluğunda bir dilim döndürmelidir. Programı çalıştırdığınızda, sizin fotoğrafınızı gösterecek, tamsayıları grilik ölçeğine (veya mavilik ölçeği) denk gelen değerler olarak yorumlayacak.

Resim seçimi size ait. Kullanacağınız fonksiyonlar; `x^y`, `(x+y)/2` ve `x*y` işlemlerini içermektedir.

(`[][]uint8` içerisindeki her "`[]uint8`"e alan tahsis etmek için döngü kullanmanız gerekmektedir.)

(Türler arasında dönüşüm yapmak için `uint8(intValue)` ifadesini kullanın.)

.play prog/tour/exercise-slices.go

* Eşlemler

Bir eşlem ("map"), anahtarları ("keys") değerlere ("values") eşler.

Eşlemler kullanılmadan önce mutlaka `make` ile yaratılmalıdır (`new` ile değil!); `nil` tipindeki bir eşlem boştur ve atanamaz.


.play prog/tour/maps.go

* Map değişmezleri

Eşlem değişmezleri ("map literals") de yapı değişmezlerine ("struct literals") benzer yapıdadır; fakat anahtar kullanımı zorunludur.

.play prog/tour/map-literals.go

* Map değişmezleri devam

Eğer üst-seviye tür yalnızca tür adı ise, onu eşlem değişmezinin elemanları arasından çıkartabilirsiniz.

.play prog/tour/map-literals-continued.go

* Eşlemleri Değiştirme
`m` eşlemimize bir eleman ekleyelim ya da varolan bir elemanı değiştirelim:

	m[key] = elem

Bir elemana erişelim:

	elem = m[key]

Bir elemanı silelim:

	delete(m, key)

Anahtarın mevcut olup olmadığını çift-değer ataması ile test edelim:

	elem, ok = m[key]

Eğer `key`, `m` içindeyse, `ok`, `true` değerini alacaktır. Eğer değilse, `ok`, `false` değerini alacak ve `elem`, eşlemin eleman türü için belirlenmiş sıfır değerini ("zero value") alacaktır.

Benzer şekilde, bir eşlemden değer okurken eğer anahtar mevcut değilse okunmak istenen değer eşlemin eleman türü için belirlenmiş sıfır değerini alır.

.play prog/tour/mutating-maps.go

* Alıştırma: Eşlemler

`WordCount` fonksiyonunu gerçekleyin. Fonksiyonunuz `s` dizgisinin içerisindeki her bir “kelime” adedi için bir eşlem döndürmelidir. `wc.Test` fonksiyonu, fonksiyonunuzu test edecek ve fonksiyonunuzun başarılı ya da başarısız olduğunu çıktı olarak verecektir.

"[[http://golang.org/pkg/strings/#Fields][strings.Fields]]" size yardımcı olabilir.

.play prog/tour/exercise-maps.go

* Fonksiyon değerleri

Fonksiyonlar da birer değerdir.

.play prog/tour/function-values.go

* [Fonksiyon - kaplamlar]("Function closures")

Go fonksiyonları kaplam ("closure") olabilirler. Kaplam, kendi bloğunun dışındaki değişkenlere erişen bir fonksiyon değeridir. Fonksiyon bu değerlere erişip, atama yapabilir; yani bir bakıma bu fonksiyon o değerler ile aynı kapsamdadır.

Bu örnekte; `adder` fonksiyonu bir kaplam döndürür. Her kaplam kendi `sum` değişkeni ile aynı kapsamdadır.

.play prog/tour/function-closures.go

* Alıştırma: Fibonacci closure

Hadi fonksiyonlarla biraz eğlenelim.

Öyle bir `fibonacci` fonksiyonu tasarlayın ki; ardışık fibonacci sayıları döndüren bir fonksiyon (kaplam) döndürsün.

.play prog/tour/exercise-fibonacci-closure.go

* Anahtarlama

Muhtemelen `"switch"` (anahtarlama) yapısının neye benzediğini biliyorsunuzdur.

`fallthrough` deyimi ile sonlanana kadar, case gövdesi otomatik olarak sonlanacaktır.

.play prog/tour/switch.go

* Anahtarlama değerlendirme sırası

"Switch", "case"lerini yukarıdan aşağıya doğru sıra ile değerlendirir ve "case"lerden biri doğrulandığında "switch" son bulur.

(Örneğin,

	switch i {
	case 0:
	case f():
	}

eğer`i==0` ise `f`'yi çağırmaz.)

#appengine: *Not:* Go Playground'ta zaman her daim 2009-11-10 23:00:00 UTC'den başlar, 
#appengine: bu değerin önemi okuyucu için bir alıştırma niteliğinde olmasıdır.

.play prog/tour/switch-evaluation-order.go

* Koşulsuz Anahtarlama

Koşul belirtilmemiş bir "switch", bir `switch`true` ile aynı işi görür.

Bu yapı uzun "if-then-else" zincirleri yerine kullanılabilecek temiz bir yöntemdir.

.play prog/tour/switch-with-no-condition.go

* Zor Alıştırma: Karmaşık küp kökler

Go'nun kompleks sayılar için sağladığı dahili desteği `complex64` ve `complex128` türleri ile keşfedelim. Küp kökler için, Newton'un yöntemi:

.image static/newton3.png

formülünü tekrarlayarak sonuca gider.

Algoritmanın çalıştığından emin olmak için, 2'nin küp kökünü bulun. `math/cmplx` paketinin içinde bir [[http://golang.org/pkg/math/cmplx/#Pow][Pow]] fonksiyonu bulunmaktadır.

.play prog/tour/advanced-exercise-complex-cube-roots.go

* Metodlar ve Arayüzler

İlerleyen slaytlar metodlar ("methods"), arayüzler ("interfaces"), nesneleri ("objects") ve nesnelerin davranış biçimlerini tanımlayan yapıları kapsıyor. 

* Metodlar

Go dilinde sınıf yapısı ("class") bulunmaz. Buna karşın "struct" türlerinde metodlar tanımlayabilirsiniz.

_Metod_alıcısı_ ("method receiver"), `func` anahtar sözcüğü ve metod ismi arasında kendi argüman listesinde bulunur.

.play prog/tour/methods.go

* Metodlar devam

Hatta sadece "struct"larda değil, metodunuzu paketinizde tanımladığınız _herhangi_ bir türde de tanımlayabilirsiniz.

Başka bir paketten aldığınız bir türde ya da temel türlerde metod tanımlayamazsınız.

.play prog/tour/methods-continued.go

* İşaretçi alıcılarıyla metodlar

Metodlar adlandırılmış türlerle ya da adlandırılmış bir türü gösteren işaretçilerle ilişkilendirilebilir.

Henüz, biri `*Vertex` işaretçi türünde ve diğeri ise `MyFloat` değer türünde olmak üzere iki `Abs` metodu gördük.

İşaretçi alıcısı ("pointer receiver") kullanmamızın iki nedeni vardır. Birincisi, her metod çağrısında değer kopyalamasından kaçınmak (eğer değer türü büyük bir "struct" ise daha verimli). İkincisi ise metodun işaret alıcısının gösterdiği değeri değiştirebilmesidir.

`*Vertex` yerine `Vertex`'i alıcı olarak kullanmak için, `Abs` ve `Scale` metodlarının bildirimlerini değiştirmeyi deneyin.

`v` bir `Vertex` ise, `Scale` metodunun hiçbir etkisi yoktur. `Scale`, `v`'yi dönüştürür. `v` işaretçi olmayan bir değer olduğunda, metod onu `Vertex`'in bir kopyası olarak görür ve asıl değeri dönüştüremeyecektir.

`Abs` her iki şekilde de çalışır. Yalnızca `v`'yi okur. Burada asıl değeri okuması (işaretçi vasıtası ile) ve kopyalanmış değeri okuması arasında hiçbir fark yoktur.

.play prog/tour/methods-with-pointer-receivers.go

* Arayüzler

Bir arayüz ("interface") türü bir grup metod tarafından tanımlanır.

Arayüz türünün değeri, o metodları gerçekleyen değerlerden herhangi birine sahip olabilir.

.play prog/tour/interfaces.go

* Arayüzler devam

Türler arayüzleri, gerçeklenen metodları kullanarak gerçeklerler.

_Burada_niyetin_açık_bir_bildirimi_yoktur._

Soyutlanmış arayüzler ("implicit interfaces"), gerçekleme paketlerini arayüzü tanımlayan paketlerden ayırır: hiçbiri bir diğerine bağlı değildir.

Soyutlanmış arayüzler, aynı zamanda, duyarlı arayüzlerin tanımlanmasına teşvik eder; bu sayede her gerçeklemeyi bulup yeni bir arayüz ismi ile etiketlemek zorunluluğundan kurtulursunuz.

[[http://golang.org/pkg/io/][Package io]], `Reader` ve `Writer`'ı otomatik olarak tanımlar; böylece siz tanımlamak zorunda kalmazsınız.

.play prog/tour/interfaces-are-satisfied-implicitly.go

* Hatalar

Kendini hata dizgisi olarak tarif edebilen her şey bir "hata"dır. Bu fikir önceden tanımlanmış, dahili arayüz türünde, `error`'da, dizgi döndüren, kendi tekil metoduyla (`Error`) saklanır,:

	type error interface {
		Error() string
	}

`fmt` paketlerinin çeşitli çıktı rutinleri, bir "`error`" çıktısı istendiğinde onu nasıl sunacaklarını otomatik olarak bilir.

.play prog/tour/errors.go

* Alıştırma: Hatalar

Önceki alıştırmalarda kullandığınız `Sqrt` fonksiyonunuzu kopyalayın ve onu bir `error` (hata) değeri döndürecek şekilde düzenleyin.

`Sqrt` fonksiyonunuz negatif bir sayı verildiğinde, tıpkı kompleks sayıları desteklemediğinde yapacağı gibi, nil olamayan bir hata mesajı döndürmelidir.

Yeni bir tür oluşturun

	type ErrNegativeSqrt float64

ve ona

	func (e ErrNegativeSqrt) Error() string

metodunu ekleyerek `error` verebilecek hale getirin. Örneğin; `ErrNegativeSqrt(-2).Error()` metodunun `"Negatif sayıların karekökü alınamaz: -2"` döndürmesi gibi.

*Not:* `Error` metodunun içindeki `"fmt.Print(e)"`e yapılan bir çağrı programı sonsuz bir döngünün içerisine sokacaktır. `e` değerini öncelikle dönüştürerek bunu önleyebilirsiniz: `fmt.Print(float64(e))`. Neden?

`Sqrt` fonksiyonunuzu, kendisine bir negatif sayı verildiğinde `ErrNegativeSqrt` değerini döndürecek biçimde değiştirin.

.play prog/tour/exercise-errors.go

* Web sunucuları

[[http://golang.org/pkg/net/http/][http paketi]] HTTP isteklerini, `http.Handler`’ ı gerçekleyen değerleri kullanarak karşılar:

	package http

	type Handler interface {
		ServeHTTP(w ResponseWriter, r *Request)
	}

Bu örnekte, `Hello` türü "http.Handler"ı gerçekliyor.

Selamı görmek için [[http://localhost:4000/][http://localhost:4000/]] adresini ziyaret edin.

#appengine: *Not:* Bu örnek turumuzun web-tabanlı kullanıcı arayüzünde çalışmayacaktır.
#appengine: Web sunucusu yazmayı denemek için
#appengine: [[http://golang.org/doc/install/][Go'yu yükleyin]].

.play prog/tour/web-servers.go

* Alıştırma: HTTP Yakalayıcıları

Aşağıdaki türleri gerçekleyin ve ServeHTTP metodlarını tanımlamak için bu türleri kullanın. Web sunucunuzdaki belirli yolları kontrol edebilmek için bu türleri o yollar ile ilişkilendirin.

	type String string

	type Struct struct {
		Greeting string
		Punct    string
		Who      string
	}

Örneğin, HTTP istekleri yakalayıcıları ("handlers") ile şu şekilde belirttiğimiz türleri ilişkilendirebiliyor olmalısınız:

	http.Handle("/string", String("I'm a frayed knot."))
	http.Handle("/struct", &Struct{"Hello", ":", "Gophers!"})

.play prog/tour/exercise-http-handlers.go

* Görüntüler

[[http://golang.org/pkg/image/#Image][image paketi]], `Image` arayüzünü tanımlar:

	package image

	type Image interface {
		ColorModel() color.Model
		Bounds() Rectangle
		At(x, y int) color.Color
	}

(Tüm detaylar için [[http://golang.org/pkg/image/#Image][bu dokümana]] göz atın.)

Ayrıca, `color.Color` ve `color.Model` da birer arayüzdür, fakat öntanımlı `color.RGBA` ve `color.RGBAModel` gerçeklemelerini kullanarak bunu görmezden geleceğiz.

.play prog/tour/images.go

* Alıştırma: Görüntüler

Daha önceden yazdığınız resim üretici hatırladınız mı? Hadi bir tane daha yazalım ama bu defa bir veri dilimi döndürmek yerine `image.Image` gerçeklemesi döndürsün.

Kendi `Image` tipinizi tanımlayın, [[http://golang.org/pkg/image/#Image][gerekli metodları]] gerçekleyin ve "`pic.ShowImage`"i çağırın.

`Bounds`, `image.Rect(0, `0, `w, `h)` gibi bir `image.Rectangle` döndürmelidir.

`ColorModel`, `color.RGBAModel` döndürmeli.

`At` bir renk döndürmelidir; son resim üreticideki `v` değeri bu defa `color.RGBA{v, `v, `255, `255}`'e denk gelmelidir.

.play prog/tour/exercise-images.go

* Alıştırma: Rot13 Okuyucu

En bilindik tasarım modellerinden biri [[http://golang.org/pkg/io/#Reader][io.Reader]]'ın  `başka bir io.Reader`' ı sarıp, bir şekilde akışı düzenlemesidir.

Örneğin, [[http://golang.org/pkg/compress/gzip/#NewReader][gzip.NewReader]] fonksiyonu bir `io.Reader` alır ("gzip"lemiş verinin bir parçası) ve onu aynı zamanda `io.Reader`ı gerçekleyen (açılmış sıkıştırılmış verinin bir parçası) bir `*gzip.Reader` döndürür.

[[http://en.wikipedia.org/wiki/ROT13][ROT13]] algoritmasını kullanarak alfabedeki tüm harfleri veri akışını değiştirerek şifreleyen, `io.Reader`'dan okuyup yine `io.Reader`'a yazan bir `rot13Reader`' gerçekleyin.

`rot13Reader` türünü sizin için sunduk. `Read` metodunu gerçekleyerek onu bir `io.Reader` haline getirin.

.play prog/tour/exercise-rot-reader.go

* Eşzamanlılık

Bir sonraki bölüm, Go'nun eşzamanlılık adına sunduğu temel mekanizmaları kapsıyor.

* Go rutinleri

"_goroutine_" Go tarafından çalışma zamanında yönetilen hafif bir iş parçacığıdır ("lightweight thread").

	go f(x, y, z)

	f(x, y, z)

çalıştıran yeni bir gorutini başlatır.

'`f`', '`x`', '`y`' ve '`z`'nin değerlendirilmesi mevcut gorutinde, `f`in çalıştırılması ise yeni bir gorutinde gerçekleşir.

Gorutinleri aynı adres boşluğunda çalışır, bu yüzden paylaşılmış bellek erişimi mutlaka senkronize edilmelidir. `[[http://golang.org/pkg/sync/][sync]]` paketi yararlı "ilkellikler" sağlar, yine de Go'da başka "ilkel paketler" olduğundan buna çok ihtiyaç duymayacaksınız. (Bir sonraki slayta geçin.)

.play prog/tour/goroutines.go

* Kanallar

Kanallar ("channels"), kanal operatörü, `<-`, vasıtası ile değer gönderip alabildiğiniz veri akışını sağlayan türlerdir.

	ch <- v    // v'yi ch kanalına yolla.
	v := <-ch  // ch'den al ve
           // değeri v'ye ata.

(Veri akışı ok yönünde gerçekleşir.)

Tıpkı eşlemler ve dilimler gibi kanallar da kullanılmadan önce oluşturulmalıdır:

	ch := make(chan int)

Varsayılan olarak, veri gönderimleri ve veri alımları diğer taraf hazır olana kadar bloklanır. Bu gorutinlerinin, aşikar kilitler ("explicit locks") veya şartlı değişkenleri (conditional variables) kullanmadan senkronize olmasını sağlar.

.play prog/tour/channels.go

* Tamponlu Kanallar

Kanallar _tamponlanabilir_.  Tamponlanmış bir kanalı ilklendirmek için `make` fonksiyonunun ikinci parametresine tampon ("buffer") uzunluğunu girin:

	ch := make(chan int, 100)

Tamponlanmış bir kanala veri gönderimleri, sadece tampon tamamen dolu olduğunda durur. Tamponlanmış bir kanaldan veri alımları ise tampon tamamen boş olduğunda durur.

Örneği tamponu gereğinden fazla dolacak şekilde düzenleyip, ne olduğunu gözlemleyin.

.play prog/tour/buffered-channels.go

* Range ve Close

Gönderici bir kanaldan daha fazla değer gönderilmeyeceğini belirtmek adına `close` dahili fonksiyonu ile bu kanalı kapatabilir. Alıcılar, alıcı ifadeye ikinci bir parametre ataması yaparak kanalın kapalı olup olmadığını öğrenebilir:

	v, ok := <-ch

Eğer alınacak başka değer kalmamış ve kanal kapatılmışsa `ok`, `false` değerini alacaktır.

`for i := range c` döngüsü değerleri kanaldan kanal kapanana kadar tekrar tekrar alır.

*Not:* Yalnızca gönderen kanalı kapatmalıdır, alıcı asla kapatmamalıdır. Kapalı kanala bir şeyler göndermek paniğe yol açacaktır.

*Başka*bir*not*: Kanallar dosya gibi değildir; genellikle kapatma ihtiyacı duyulmaz. Kapatma işlemi yalnızca alıcıya daha başka değer gelmeyeceğini bildirmek maksadıyla yapılır, tıpkı bir "`range`" döngüsünü sonlandırmak gibi.

.play prog/tour/range-and-close.go

* Seçmek

"`select`" deyimi bir gorutinin birden fazla iletişim işleminde beklemesine izin verir.

Bir `select`, "case"lerinden biri çalıştırılabilene kadar tıkalıdır, uygun duruma gelen "case"i çalıştırır. Eğer birden fazla çalıştırılabilir "case" varsa aralarından rastgele birini seçer.

.play prog/tour/select.go

* Varsayılan Seçim

Eğer hazırda başka "case" yoksa `select`in içerisindeki `default` "case"i çalıştırılır.

`default` "case"i bloklanmadan veri alma ya da gönderme yapmak için deneyin:

	select {
	case i := <-c:
		// i'yi kulllan
	default:
		// c'den almak bloklamalıydı
	}

.play prog/tour/default-selection.go

* Alıştırma: Eşdeğer İkili Ağaçlar

Aynı sıralı değerlerin tutulduğu yapraklara sahip çok fazla farklı ikili ağaçlar olabilir. Örneğin, burada 1, 1, 2, 3, 5, 8, 13 sıralı değerlerini tutan iki adet ikili ağaç var:

.image static/tree.png

Çoğu dilde, iki adet ikili ağacın verileri aynı sırada tutup tutmadığını kontrol eden fonksiyonu gerçeklemek bir hayli karışıktır. Basit bir çözüm sunabilmek adına Go'nun eşzamanlılığını ve kanallarını kullanacağız.

Bu örnek `tree` paketini kullanır ve bu paket:

	type Tree struct {
		Left  *Tree
		Value int
		Right *Tree
	}

türlerini tanımlar.

* Alıştırma: Eşdeğer İkili Ağaçlar

*1.* `Walk` fonksiyonunu gerçekleyin.

*2.* `Walk` fonksiyonunu test edin.

"`tree.New(k)`" fonksiyonu `k`, `2k`, `3k`, ..., `10k` değerlerini tutarak rastgele yapılandırılmış bir ikili ağacı inşa eder.

`ch` adında yeni bir kanal oluşturun ve walker'ı dışarı atın:

	go Walk(tree.New(1), ch)

Daha sonra kanaldan 10 değerini okuyun ve yazdırın. Değerler 1, 2, 3, ..., 10 olmalı.

*3.* `t1` ve `t2`'nin aynı değerleri saklayıp saklamadığını belirleyebilmek adına `Same` fonksiyonunu `Walk` kullanarak gerçekleyin.

*4.* `Same` fonksiyonunu test edin.

`Same(tree.New(1),`tree.New(1))` true döndürmeli ve 
`Same(tree.New(1),`tree.New(2))` false döndürmeli.

.play prog/tour/exercise-equivalent-binary-trees.go

* Alıştırma: Web Crawler

Bu uygulamada Go'nun eşzamanlılık yeteneklerini kullanarak bir web crawler uygulamasını paralelleştirmeyi öğreneceksiniz.

`Crawl` fonksiyonunu, paralelde URL'leri çekecek biçimde (aynı URL iki defa çekilmeyecek) düzenleyin.

.play prog/tour/exercise-web-crawler.go

* Nerelere gidelim...

#appengine: İşe [[http://golang.org/doc/install/][Go yükleyerek]] ya da
#appengine: [[http://code.google.com/appengine/downloads.html#Google_App_Engine_SDK_for_Go][Go App Engine SDK]]
#appengine: indirerek başlayabilirsiniz.

#appengine: Go'yu yükledikten sonra,
[[http://golang.org/doc/][Go Dokümantasyonu]]
#appengine: Go ile yolunuza en iyi şekilde devam edebilmenizi sağlayacaktır.
başlangıç için harika bir seçenek.

Bu dokümantasyonunda; referans kaynakları, bilgilendirici yazıları, videoları ve daha fazlasını bulabilirsiniz.

Go kodu ile nasıl çalışılabileceğini öğrenmek için, [[http://www.youtube.com/watch?v=XCsL89YtqCs][bu videoyu]]izleyebilir ya da [[http://golang.org/doc/code.html][How to Write Go Code]] dokümanını okuyabilirsiniz.

Standart kütüphane ile ilgili yardıma ihtiyacınız olursa, [[http://golang.org/pkg/][paket referansına]]bir göz atın. Dilin kendisi hakkında yardım almak için [[http://golang.org/ref/spec][Dil Belirtimi]] sayfasına girdiğinizde, burayı gayet okunabilir bulduğunuzda şaşırabilirsiniz.

Go'nun eşzamanlılık modeli hakkında daha derin bilgi için, [[http://www.youtube.com/watch?v=f6kdp27TYZs][Go Eşzamanlılık Desenleri]]'ni, [[https://www.youtube.com/watch?v=QDDwwePbDtw][İleri Go Eşzamanlılık Desenleri]]'ni izleyin ve
([[http://talks.golang.org/2012/concurrency.slide][slides]])[[http://golang.org/doc/codewalk/sharemem/][Hafızayı İletişim ile Paylaşma]]'yı okuyun.

Web uygulamaları yazmaya başlamak için,
[[http://vimeo.com/53221558][Basit Bir Programlama Ortamı]]'nı
([[http://talks.golang.org/2012/simple.slide][slaytlar]]) izleyin ve
[[http://golang.org/doc/articles/wiki/][Web Uygulamaları Yazma]] rehberini okuyun.

[[http://golang.org/doc/codewalk/functions/][Go'da Birinci Sınıf Fonksiyonlar]], Go'nun fonksiyon türleri hakkında farklı bir bakış açısı sunacaktır.

[[http://blog.golang.org/][Go Blog]], büyük bir Go makalesi arşivine sahip.

Daha fazlası için [[http://golang.org][golang.org]]'u ziyaret edin.

